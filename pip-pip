#!/bin/sh

cmd=$0
cwd=`pwd`

pip_default_version=2

begin_str=">>>"

print_usage () {
    echo "`basename $cmd` [<OPTIONS>]"
    echo "   OPTIONS:"
    echo "     --prefix=<PREFIX_DIR>"
    echo "     --build=<BUILD_DIR>"
    echo "     --version=<PIP_VERSION:2|3>"
    echo "     --clean"
    echo "     --dryrun"
    echo "     --help | --usage"
    if [ $# -ne 0 ]; then
	echo "     --repo=GITHUB|RCCS"
    fi
    exit 1
}

if ! [ -f /etc/redhat-release ]; then
    echo "Unsupported Linux distribution"
    flag_error=true
fi
release=`cat /etc/redhat-release`
case $release in
    *Linux*7.*) linux_version=7;;
    *Linux*8.*) linux_version=8;;
    *)		echo "Unsupported Linux distribution: $release";
		flag_error=true;;
esac

config_guess=`./config.guess`
case $config_guess in
    x86_64-*)  arch=x86_64;;
    aarch64-*) arch=aarch64;;
    *)	       echo "Unsupported architecture: $config_guess";
		flag_error=true;;
esac

prefix=""
build=""
pip_version=""
repo=""
flag_clean=false
flag_dryrun=false
flag_error=false

while [ $# -gt 0 ]; do
    case $1 in
	--prefix=*)	prefix=`echo "$1" | cut -f 2 -d "="`;;
	-p*)		shift; prefix=$1;;
	--build=*)	build=`echo "$1" | cut -f 2 -d "="`;;
	-b*)		shift; build=$1;;
	--version=*)	pip_version=`echo "$1" | cut -f 2 -d "="`;;
	-v*)		shift; pip_version=$1;;
	--git=*)	repo=`echo "$1" | cut -f 2 -d "="`;;
	-g*)		shift; repo=$1;;
	-*c*)		flag_clean=true;;
	-*d*)		flag_dryrun=true;;
        -*secret)	print_usage 1;;
	-*h*|-*u*)	print_usage;;
	*)		echo "Unknown option: $1"; print_usage;;
    esac
    shift
done

is_partof () {
    path0=$1
    path1=$2
    if [ $path0 == $path1 ]; then return true; fi
    case $path0 in
	"${path1}/"*) return true;;
    esac
    return flase
}

build () {
    logfile=$1
    shift
    echo "$@ >> $logfile "
    $@ >> $logfile 2>&1 &
    pid=$!
    while kill -0 $pid > /dev/null 2>&1; do
	sleep 1
	echo -n "."
    done
    wait $pid
    exst=$?
    if [ $exst == 0 ]; then
	echo " SUCCEEDED"
    else
	echo " FAILED"
	flag_error=true
    fi
    return $exst
}

if $flag_clean; then
    if is_partof $build $prefix; then
	echo "--clean is disabled since BUILD includes PREFIX"
	flag_clean=false
    fi
fi

case "$pip_version" in
    -1)      pip_version="1";;		# hidden, deprecated version
    2|3)     true;;
    all|ALL) pip_version="all";;
    "")      pip_version="$pip_default_version";;
    *)       echo "Illegal PiP version: $pip_version"; print_usage;;
esac

if [ $pip_version = "1" ]; then
    if [ $linux_version = "8" ]; then
	echo "RHEL/CentOS8 is not supported by PiP-v1"
	flag_error=true
    fi
fi

case $repo in
    ""|github|GITHUB)
	repo=https://github.com/RIKEN-SysSoft/;
	pip="PiP";;
    rccs|RCCS)			# private repo
	repo=git@git.sys.r-ccs.riken.jp:software/;
	pip="PIP";;
    *)
	echo "Unknown GIT repo: $repo"; print_usage;;
esac

pip_pip () {
    prefix=$1
    build=$2
    pip_version=$3

    if [ $pip_version == all ]; then
	prefix_base=${prefix}/${arch}_redhat-${linux_version}_pip-${pip_version}
    else
	prefix_base=${prefix}
    fi

    if [ $pip_version == all ]; then
	build_base=${build}/${arch}_redhat-${linux_version}_pip-${pip_version}
    else
	build_base=${build}
    fi

    if [ -d $build_base ]; then
	echo "Build directory exists already: $build_base"
	return 1;
    fi

    repo_glibc=${repo}${pip}-glibc.git
    repo_pip=${repo}${pip}.git
    repo_gdb=${repo}${pip}-gdb.git

    branch_pip=pip-$pip_version

    if [ $linux_version == 7 ]; then
	branch_glibc=centos/glibc-2.17-260.el7.pip.branch
	branch_gdb=centos/gdb-7.6.1-94.el7.pip.branch
    else
	branch_glibc=centos/glibc-2.28-72.el8_1.1.pip.branch
	branch_gdb=centos/gdb-7.6.1-94.el7.pip.branch # temporaly should be fixed !!
    fi

    if $flag_error; then return 1; fi

    echo;
    echo "Linux: " $linux_version
    echo "Arch:  " $arch
    echo "PiP:   " ${pip}-${pip_version}
    echo "Repo:  " $repo
    echo "Build: " $build_base
    echo "Prefix:" $prefix_base

    if $flag_dryrun; then return 0; fi

    mkdir -p $build_base
    log_base=$build_base/log
    mkdir $log_base

    cd $build_base

    echo; echo "[ PiP-Glibc ]"
    build_log=$log_base/pip-glibc-build.log
    echo -n > $build_log
    mkdir $build_base/${pip}-glibc
    echo "$begin_str Cloning PiP-glibc"
    build $build_log git clone -b $branch_glibc $repo_glibc

    echo "$begin_str Building PiP-glibc"
    glibc_builddir=${build_base}/glibc-build
    mkdir $glibc_builddir
    (
	cd $glibc_builddir
	build $build_log ../${pip}-glibc/build.sh ${prefix_base}/glibc-install
    )

    if ! [ -x ${prefix_base}/glibc-install/bin/piplnlibs.sh ]; then
	echo "FAIL"; exit 1;
    fi

    echo; echo "[ PiP Lib. ]"
    build_log=${log_base}/pip-lib-build.log
    echo -n > $build_log
    echo "$begin_str Cloning PiP lib."
    build $build_log git clone -b $branch_pip $repo_pip

    echo "$begin_str Building PiP lib."
    (
	cd ${pip}
	build $build_log ./configure \
	    --prefix=${prefix_base}/pip-install \
	    --with-glibc-libdir=${prefix_base}/glibc-install/lib
	if [ $? -ne 0 ]; then exit 1; fi
	build $build_log make
	if [ $? -ne 0 ]; then exit 1; fi
	build $build_log make check
	if [ $? -ne 0 ]; then exit 1; fi
	build $build_log make install
	if [ $? -ne 0 ]; then exit 1; fi
	build $build_log make check-installed
	if [ $? -ne 0 ]; then exit 1; fi
	build $build_log make doc-install
	if [ $? -ne 0 ]; then exit 1; fi
    )

    if ! [ -x ${prefix_base}/pip-install/bin/pipcc ]; then
	echo "FAIL"; exit 1
    fi

    echo; echo "[ PiP-gdb ]"
    build_log=${log_base}/pip-gdb-build.log
    echo -n > $build_log
    echo "$begin_str Cloning PiP-gdb"
    build $build_log git clone -b $branch_gdb $repo_gdb

    echo "$begin_str Building PiP-gdb"
    (
	cd ${pip}-gdb
	build $build_log ./build.sh --prefix=${prefix_base}/gdb-install \
	    --with-pip=${prefix_base}/pip-install
    )

    if ! [ -x ${prefix_base}/gdb-install/bin/pip-gdb ]; then
	echo "FAIL"; exit 1;
    fi

    if $flag_clean; then
	rm -f -r $build_base
    fi
}

if [ x"$prefix" == x ]; then
    prefix="install"
fi
pfx=`realpath $prefix 2> /dev/null`
if [ $? != 0 ]; then
    echo "Invalid prefix path: $prefix"
    flag_error=true
fi
prefix=$pfx

if [ x"$build" == x ]; then
    build="build"
fi
bld=`realpath $build 2> /dev/null`
if [ $? != 0 ]; then
    echo "Invalid build path: $build"
    flag_error=true
fi
build=$bld

if $flag_error; then
    exit 1;
fi

if [ $pip_version == all ]; then
    if [ $linux_version == 7 ]; then
	versions="1 2 3"
    else
	versions="2 3"		# pip-1 does not support RHEL8
    fi
    for ver in $versions; do
	pip_pip "$prefix" "$build" "$ver"
    done
else
    pip_pip "$prefix" "$build" "$pip_version"
fi

if $flag_error; then
    exit 1
else
    exit 0
fi
